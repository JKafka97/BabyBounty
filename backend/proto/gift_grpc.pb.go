// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gift

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GiftServiceClient is the client API for GiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiftServiceClient interface {
	GetGift(ctx context.Context, in *GetGiftRequest, opts ...grpc.CallOption) (*GetGiftResponse, error)
	ListGift(ctx context.Context, in *ListGiftRequest, opts ...grpc.CallOption) (*ListGiftResponse, error)
	AddGift(ctx context.Context, in *AddGiftRequest, opts ...grpc.CallOption) (*AddGiftResponse, error)
	RemoveGift(ctx context.Context, in *RemoveGiftRequest, opts ...grpc.CallOption) (*RemoveGiftResponse, error)
	ReserveGift(ctx context.Context, in *ReserveGiftRequest, opts ...grpc.CallOption) (*ReserveGiftResponse, error)
}

type giftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGiftServiceClient(cc grpc.ClientConnInterface) GiftServiceClient {
	return &giftServiceClient{cc}
}

func (c *giftServiceClient) GetGift(ctx context.Context, in *GetGiftRequest, opts ...grpc.CallOption) (*GetGiftResponse, error) {
	out := new(GetGiftResponse)
	err := c.cc.Invoke(ctx, "/gift.GiftService/GetGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) ListGift(ctx context.Context, in *ListGiftRequest, opts ...grpc.CallOption) (*ListGiftResponse, error) {
	out := new(ListGiftResponse)
	err := c.cc.Invoke(ctx, "/gift.GiftService/ListGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) AddGift(ctx context.Context, in *AddGiftRequest, opts ...grpc.CallOption) (*AddGiftResponse, error) {
	out := new(AddGiftResponse)
	err := c.cc.Invoke(ctx, "/gift.GiftService/AddGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) RemoveGift(ctx context.Context, in *RemoveGiftRequest, opts ...grpc.CallOption) (*RemoveGiftResponse, error) {
	out := new(RemoveGiftResponse)
	err := c.cc.Invoke(ctx, "/gift.GiftService/RemoveGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) ReserveGift(ctx context.Context, in *ReserveGiftRequest, opts ...grpc.CallOption) (*ReserveGiftResponse, error) {
	out := new(ReserveGiftResponse)
	err := c.cc.Invoke(ctx, "/gift.GiftService/ReserveGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftServiceServer is the server API for GiftService service.
// All implementations must embed UnimplementedGiftServiceServer
// for forward compatibility
type GiftServiceServer interface {
	GetGift(context.Context, *GetGiftRequest) (*GetGiftResponse, error)
	ListGift(context.Context, *ListGiftRequest) (*ListGiftResponse, error)
	AddGift(context.Context, *AddGiftRequest) (*AddGiftResponse, error)
	RemoveGift(context.Context, *RemoveGiftRequest) (*RemoveGiftResponse, error)
	ReserveGift(context.Context, *ReserveGiftRequest) (*ReserveGiftResponse, error)
	mustEmbedUnimplementedGiftServiceServer()
}

// UnimplementedGiftServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGiftServiceServer struct {
}

func (UnimplementedGiftServiceServer) GetGift(context.Context, *GetGiftRequest) (*GetGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGift not implemented")
}
func (UnimplementedGiftServiceServer) ListGift(context.Context, *ListGiftRequest) (*ListGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGift not implemented")
}
func (UnimplementedGiftServiceServer) AddGift(context.Context, *AddGiftRequest) (*AddGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGift not implemented")
}
func (UnimplementedGiftServiceServer) RemoveGift(context.Context, *RemoveGiftRequest) (*RemoveGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGift not implemented")
}
func (UnimplementedGiftServiceServer) ReserveGift(context.Context, *ReserveGiftRequest) (*ReserveGiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveGift not implemented")
}
func (UnimplementedGiftServiceServer) mustEmbedUnimplementedGiftServiceServer() {}

// UnsafeGiftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiftServiceServer will
// result in compilation errors.
type UnsafeGiftServiceServer interface {
	mustEmbedUnimplementedGiftServiceServer()
}

func RegisterGiftServiceServer(s grpc.ServiceRegistrar, srv GiftServiceServer) {
	s.RegisterService(&GiftService_ServiceDesc, srv)
}

func _GiftService_GetGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).GetGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gift.GiftService/GetGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).GetGift(ctx, req.(*GetGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_ListGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).ListGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gift.GiftService/ListGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).ListGift(ctx, req.(*ListGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_AddGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).AddGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gift.GiftService/AddGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).AddGift(ctx, req.(*AddGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_RemoveGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).RemoveGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gift.GiftService/RemoveGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).RemoveGift(ctx, req.(*RemoveGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_ReserveGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).ReserveGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gift.GiftService/ReserveGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).ReserveGift(ctx, req.(*ReserveGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GiftService_ServiceDesc is the grpc.ServiceDesc for GiftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gift.GiftService",
	HandlerType: (*GiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGift",
			Handler:    _GiftService_GetGift_Handler,
		},
		{
			MethodName: "ListGift",
			Handler:    _GiftService_ListGift_Handler,
		},
		{
			MethodName: "AddGift",
			Handler:    _GiftService_AddGift_Handler,
		},
		{
			MethodName: "RemoveGift",
			Handler:    _GiftService_RemoveGift_Handler,
		},
		{
			MethodName: "ReserveGift",
			Handler:    _GiftService_ReserveGift_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gift.proto",
}
